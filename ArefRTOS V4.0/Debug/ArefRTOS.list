
ArefRTOS.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c98  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000dc8  08000dd0  00010dd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000dc8  08000dc8  00010dd0  2**0
                  CONTENTS
  4 .ARM          00000000  08000dc8  08000dc8  00010dd0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dc8  08000dd0  00010dd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dc8  08000dc8  00010dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dcc  08000dcc  00010dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000000  08000dd0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08000dd0  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010dd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c79  00000000  00000000  00010df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008e4  00000000  00000000  00012a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000964  00000000  00000000  00013356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  00013cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000180  00000000  00000000  00013eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002545  00000000  00000000  00014038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002c26  00000000  00000000  0001657d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a062  00000000  00000000  000191a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00023205  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000548  00000000  00000000  00023258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000db0 	.word	0x08000db0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000db0 	.word	0x08000db0

08000170 <queue_create>:
* 														   *
*			    FUNCTIONS DEFINITION	                   *
*														   *
************************************************************/
QUEUE_STATE queue_create(queue_t *ptq)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    ptq->_rear = 0 ;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
    ptq->_front = 0 ;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2200      	movs	r2, #0
 8000182:	605a      	str	r2, [r3, #4]
    ptq->_counter = 0 ;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2200      	movs	r2, #0
 8000188:	609a      	str	r2, [r3, #8]
    return QUEUE_NO_ERROR ;
 800018a:	2300      	movs	r3, #0
}
 800018c:	4618      	mov	r0, r3
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
	...

08000198 <queue_add>:
QUEUE_STATE queue_add(queueEntry dataEnqueue ,queue_t *ptq)
{
 8000198:	b480      	push	{r7}
 800019a:	b083      	sub	sp, #12
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	6039      	str	r1, [r7, #0]
    /* Check if it full */
    if(ptq->_counter >= queueSize)
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	689b      	ldr	r3, [r3, #8]
 80001a6:	2b09      	cmp	r3, #9
 80001a8:	dd01      	ble.n	80001ae <queue_add+0x16>
        return QUEUE_FULL ;
 80001aa:	2301      	movs	r3, #1
 80001ac:	e021      	b.n	80001f2 <queue_add+0x5a>
    ptq->_rear = (ptq->_rear) % queueSize ;
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	6819      	ldr	r1, [r3, #0]
 80001b2:	4b12      	ldr	r3, [pc, #72]	; (80001fc <queue_add+0x64>)
 80001b4:	fb83 2301 	smull	r2, r3, r3, r1
 80001b8:	109a      	asrs	r2, r3, #2
 80001ba:	17cb      	asrs	r3, r1, #31
 80001bc:	1ad2      	subs	r2, r2, r3
 80001be:	4613      	mov	r3, r2
 80001c0:	009b      	lsls	r3, r3, #2
 80001c2:	4413      	add	r3, r2
 80001c4:	005b      	lsls	r3, r3, #1
 80001c6:	1aca      	subs	r2, r1, r3
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	601a      	str	r2, [r3, #0]
    ptq->_queueArr[ptq->_rear] = dataEnqueue ;
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	683a      	ldr	r2, [r7, #0]
 80001d2:	3302      	adds	r3, #2
 80001d4:	009b      	lsls	r3, r3, #2
 80001d6:	4413      	add	r3, r2
 80001d8:	687a      	ldr	r2, [r7, #4]
 80001da:	605a      	str	r2, [r3, #4]
    ptq->_rear++ ;
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	1c5a      	adds	r2, r3, #1
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	601a      	str	r2, [r3, #0]
    ptq->_counter++;
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	689b      	ldr	r3, [r3, #8]
 80001ea:	1c5a      	adds	r2, r3, #1
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	609a      	str	r2, [r3, #8]
    return QUEUE_NO_ERROR ;
 80001f0:	2300      	movs	r3, #0
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	66666667 	.word	0x66666667

08000200 <queue_get>:


QUEUE_STATE queue_get(queueEntry *dataEnqueue ,queue_t *ptq)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
    /* Check if it empty */
    if(ptq->_counter == 0)
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d101      	bne.n	8000216 <queue_get+0x16>
        return QUEUE_EMPTY ;
 8000212:	2302      	movs	r3, #2
 8000214:	e022      	b.n	800025c <queue_get+0x5c>
    ptq->_front = (ptq->_front) % queueSize ;
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	6859      	ldr	r1, [r3, #4]
 800021a:	4b13      	ldr	r3, [pc, #76]	; (8000268 <queue_get+0x68>)
 800021c:	fb83 2301 	smull	r2, r3, r3, r1
 8000220:	109a      	asrs	r2, r3, #2
 8000222:	17cb      	asrs	r3, r1, #31
 8000224:	1ad2      	subs	r2, r2, r3
 8000226:	4613      	mov	r3, r2
 8000228:	009b      	lsls	r3, r3, #2
 800022a:	4413      	add	r3, r2
 800022c:	005b      	lsls	r3, r3, #1
 800022e:	1aca      	subs	r2, r1, r3
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	605a      	str	r2, [r3, #4]
    *dataEnqueue = ptq->_queueArr[ptq->_front]  ;
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	683a      	ldr	r2, [r7, #0]
 800023a:	3302      	adds	r3, #2
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	4413      	add	r3, r2
 8000240:	685a      	ldr	r2, [r3, #4]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	601a      	str	r2, [r3, #0]
    ptq->_front++ ;
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	1c5a      	adds	r2, r3, #1
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
    ptq->_counter--;
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	689b      	ldr	r3, [r3, #8]
 8000254:	1e5a      	subs	r2, r3, #1
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	609a      	str	r2, [r3, #8]
    return QUEUE_NO_ERROR ;
 800025a:	2300      	movs	r3, #0
}
 800025c:	4618      	mov	r0, r3
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	66666667 	.word	0x66666667

0800026c <queue_size>:
uint8_t queue_size(queue_t *ptq)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
    return ptq->_counter ;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	b2db      	uxtb	r3, r3
}
 800027a:	4618      	mov	r0, r3
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <ArefRTOS_voidCallService>:
* 														   *
*			       FUNCTIONS DEFINITIONS                   *
*														   *
************************************************************/
void ArefRTOS_voidCallService(uint8_t copy_u8ServiceID)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
	switch(copy_u8ServiceID)
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	2b02      	cmp	r3, #2
 8000292:	d00a      	beq.n	80002aa <ArefRTOS_voidCallService+0x26>
 8000294:	2b02      	cmp	r3, #2
 8000296:	dc0a      	bgt.n	80002ae <ArefRTOS_voidCallService+0x2a>
 8000298:	2b00      	cmp	r3, #0
 800029a:	d002      	beq.n	80002a2 <ArefRTOS_voidCallService+0x1e>
 800029c:	2b01      	cmp	r3, #1
 800029e:	d002      	beq.n	80002a6 <ArefRTOS_voidCallService+0x22>
			break;
		case ArefRTOS_SVC_REQUEST2 :
			__asm("SVC #0x02");
			break;
	}
}
 80002a0:	e005      	b.n	80002ae <ArefRTOS_voidCallService+0x2a>
			__asm("SVC #0x00");
 80002a2:	df00      	svc	0
			break;
 80002a4:	e003      	b.n	80002ae <ArefRTOS_voidCallService+0x2a>
			__asm("SVC #0x01");
 80002a6:	df01      	svc	1
			break;
 80002a8:	e001      	b.n	80002ae <ArefRTOS_voidCallService+0x2a>
			__asm("SVC #0x02");
 80002aa:	df02      	svc	2
			break;
 80002ac:	bf00      	nop
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr

080002b8 <ArefRTOS_voidHardwareInit>:


void ArefRTOS_voidHardwareInit(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	/* To initialize the STK driver */

	/* To Set Priorities	*/
    //01.Set the PendSV interrupt priority to the lowest level*/
	NVIC_SetPendSVInterruptPriority();
 80002bc:	f000 fc0a 	bl	8000ad4 <NVIC_SetPendSVInterruptPriority>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <ArefRTOS_voidStartTicker>:

void ArefRTOS_voidStartTicker(void){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
 STK_SetPeriodicInterruptInterval();
 80002c8:	f000 fc68 	bl	8000b9c <STK_SetPeriodicInterruptInterval>
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <HardFault_Handler>:
* 														   *
*			       IRQ FAULTS DEFINITIONS                  *
*														   *
************************************************************/
_attribute_(weak) void HardFault_Handler (void)
  {
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  	while(1);
 80002d4:	e7fe      	b.n	80002d4 <HardFault_Handler+0x4>

080002d6 <MemManage_Handler>:
  }

_attribute_(weak) void MemManage_Handler(void)
  {
 80002d6:	b480      	push	{r7}
 80002d8:	af00      	add	r7, sp, #0
  	while(1);
 80002da:	e7fe      	b.n	80002da <MemManage_Handler+0x4>

080002dc <BusFault_Handler>:
  }

_attribute_(weak) void BusFault_Handler(void)
  {
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  	while(1);
 80002e0:	e7fe      	b.n	80002e0 <BusFault_Handler+0x4>

080002e2 <UsageFault_Handler>:
  }

_attribute_(__WEAK__) void UsageFault_Handler(void)
  {
 80002e2:	b480      	push	{r7}
 80002e4:	af00      	add	r7, sp, #0
  	while(1);
 80002e6:	e7fe      	b.n	80002e6 <UsageFault_Handler+0x4>

080002e8 <SVC_Handler>:
*			      IRQ HANDLERS DEFINITIONS                 *
*														   *
************************************************************/
FORCE_NAKED void SVC_Handler(void)
{
	__asm("TST   LR, #4   \n\t"
 80002e8:	f01e 0f04 	tst.w	lr, #4
 80002ec:	bf0c      	ite	eq
 80002ee:	f3ef 8008 	mrseq	r0, MSP
 80002f2:	f3ef 8009 	mrsne	r0, PSP
 80002f6:	f000 ba5f 	b.w	80007b8 <ArefRTOS_SVC_CALL>
		  "ITE   EQ 	  \n\t"
		  "MRSEQ R0,MSP   \n\t"
		  "MRSNE R0,PSP   \n\t"
		  "B 	 ArefRTOS_SVC_CALL");
}
 80002fa:	bf00      	nop

080002fc <ArefRTOS_staticMainStack>:
************************************************************/
/* @brief This Function is used to create the Main stack area with user defined size @ref MainStackSize
 * @return ArefRTOS_ErrorID return one of @ref ArefRTOS_ErrorID
 */
static ArefRTOS_ErrorID ArefRTOS_staticMainStack()
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
	ArefRTOS_ErrorID	LOC_ArefRTOS_ErrorID =	NoError ;
 8000302:	2300      	movs	r3, #0
 8000304:	71fb      	strb	r3, [r7, #7]
	// 01. Initialize start of main stack as top of HW stack
	OS_Control._S_MSP_Task = (uint32_t)&START_OF_STACK_IN_HW ;
 8000306:	4a0d      	ldr	r2, [pc, #52]	; (800033c <ArefRTOS_staticMainStack+0x40>)
 8000308:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <ArefRTOS_staticMainStack+0x44>)
 800030a:	601a      	str	r2, [r3, #0]
	// 02. Initialize the end of main stack
	OS_Control._E_MSP_Task = (uint32_t)(OS_Control._S_MSP_Task - MAINSTACKSIZE) ;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <ArefRTOS_staticMainStack+0x44>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000314:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <ArefRTOS_staticMainStack+0x44>)
 8000316:	6053      	str	r3, [r2, #4]
	// 03. Check if exceeded the available stack size,The processor uses a full descending stack
	CHECK_STACK_OVF(OS_Control._E_MSP_Task) ;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <ArefRTOS_staticMainStack+0x44>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	4a09      	ldr	r2, [pc, #36]	; (8000344 <ArefRTOS_staticMainStack+0x48>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d201      	bcs.n	8000326 <ArefRTOS_staticMainStack+0x2a>
 8000322:	2301      	movs	r3, #1
 8000324:	71fb      	strb	r3, [r7, #7]
	// 04. Reserve four bytes as safety and hold the last address in HW stack
	OS_Control.HW_Stack_Locator = ( OS_Control._E_MSP_Task - SAFETY_SPACE_BETWEEN_STACKS) ;
 8000326:	4b06      	ldr	r3, [pc, #24]	; (8000340 <ArefRTOS_staticMainStack+0x44>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	3b04      	subs	r3, #4
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <ArefRTOS_staticMainStack+0x44>)
 800032e:	6093      	str	r3, [r2, #8]

	return LOC_ArefRTOS_ErrorID ;
 8000330:	79fb      	ldrb	r3, [r7, #7]
}
 8000332:	4618      	mov	r0, r3
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	20002800 	.word	0x20002800
 8000340:	2000001c 	.word	0x2000001c
 8000344:	20000368 	.word	0x20000368

08000348 <ArefRTOS_voidIdleTask>:

/* @brief Definition of Idle Task */
static void ArefRTOS_voidIdleTask(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	for(;;){
		IDLETaskLED^=1;
 800034c:	4b04      	ldr	r3, [pc, #16]	; (8000360 <ArefRTOS_voidIdleTask+0x18>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	f083 0301 	eor.w	r3, r3, #1
 8000354:	b2da      	uxtb	r2, r3
 8000356:	4b02      	ldr	r3, [pc, #8]	; (8000360 <ArefRTOS_voidIdleTask+0x18>)
 8000358:	701a      	strb	r2, [r3, #0]
		// "WFE" instruction waits for various events, including both external and exceptional interrupts.
		__asm("WFE");
 800035a:	bf20      	wfe
		IDLETaskLED^=1;
 800035c:	e7f6      	b.n	800034c <ArefRTOS_voidIdleTask+0x4>
 800035e:	bf00      	nop
 8000360:	200000bc 	.word	0x200000bc

08000364 <ArefRTOS_voidBubbleSort>:
		*(pTask->TaskPrivateStates.pCurrentPSP) = INIT_VAL_FOR_REG ;
	}

}

static void ArefRTOS_voidBubbleSort(){
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
	// 01.Initialize the counter and create a temp variable of type ArefRTOS Task
	uint8_t LOC_u8Counter = OS_Control.CurrentNumberofTasks ;
 800036a:	4b25      	ldr	r3, [pc, #148]	; (8000400 <ArefRTOS_voidBubbleSort+0x9c>)
 800036c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000370:	717b      	strb	r3, [r7, #5]
	ArefRTOS_Task *LOC_tempTask = NULL ;
 8000372:	2300      	movs	r3, #0
 8000374:	603b      	str	r3, [r7, #0]

	// 02.Apply the bubble sort algorithm based on priority (lowest value is the highest priority)
	for(uint8_t i = 0 ; i < LOC_u8Counter - 1 ; i++){
 8000376:	2300      	movs	r3, #0
 8000378:	71fb      	strb	r3, [r7, #7]
 800037a:	e036      	b.n	80003ea <ArefRTOS_voidBubbleSort+0x86>
		for(uint8_t j = 0 ; j < LOC_u8Counter - i - 1; j++  ){
 800037c:	2300      	movs	r3, #0
 800037e:	71bb      	strb	r3, [r7, #6]
 8000380:	e029      	b.n	80003d6 <ArefRTOS_voidBubbleSort+0x72>
			if(OS_Control.OS_SchedulerTable[j]->TaskPriority > OS_Control.OS_SchedulerTable[j+1]->TaskPriority){
 8000382:	79bb      	ldrb	r3, [r7, #6]
 8000384:	4a1e      	ldr	r2, [pc, #120]	; (8000400 <ArefRTOS_voidBubbleSort+0x9c>)
 8000386:	3304      	adds	r3, #4
 8000388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038c:	7a1a      	ldrb	r2, [r3, #8]
 800038e:	79bb      	ldrb	r3, [r7, #6]
 8000390:	3301      	adds	r3, #1
 8000392:	491b      	ldr	r1, [pc, #108]	; (8000400 <ArefRTOS_voidBubbleSort+0x9c>)
 8000394:	3304      	adds	r3, #4
 8000396:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800039a:	7a1b      	ldrb	r3, [r3, #8]
 800039c:	429a      	cmp	r2, r3
 800039e:	d917      	bls.n	80003d0 <ArefRTOS_voidBubbleSort+0x6c>
				LOC_tempTask = OS_Control.OS_SchedulerTable[j];
 80003a0:	79bb      	ldrb	r3, [r7, #6]
 80003a2:	4a17      	ldr	r2, [pc, #92]	; (8000400 <ArefRTOS_voidBubbleSort+0x9c>)
 80003a4:	3304      	adds	r3, #4
 80003a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003aa:	603b      	str	r3, [r7, #0]
				OS_Control.OS_SchedulerTable[j] = OS_Control.OS_SchedulerTable[j+1];
 80003ac:	79bb      	ldrb	r3, [r7, #6]
 80003ae:	1c5a      	adds	r2, r3, #1
 80003b0:	79bb      	ldrb	r3, [r7, #6]
 80003b2:	4913      	ldr	r1, [pc, #76]	; (8000400 <ArefRTOS_voidBubbleSort+0x9c>)
 80003b4:	3204      	adds	r2, #4
 80003b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80003ba:	4911      	ldr	r1, [pc, #68]	; (8000400 <ArefRTOS_voidBubbleSort+0x9c>)
 80003bc:	3304      	adds	r3, #4
 80003be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OS_SchedulerTable[j+1] = LOC_tempTask;
 80003c2:	79bb      	ldrb	r3, [r7, #6]
 80003c4:	3301      	adds	r3, #1
 80003c6:	490e      	ldr	r1, [pc, #56]	; (8000400 <ArefRTOS_voidBubbleSort+0x9c>)
 80003c8:	3304      	adds	r3, #4
 80003ca:	683a      	ldr	r2, [r7, #0]
 80003cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint8_t j = 0 ; j < LOC_u8Counter - i - 1; j++  ){
 80003d0:	79bb      	ldrb	r3, [r7, #6]
 80003d2:	3301      	adds	r3, #1
 80003d4:	71bb      	strb	r3, [r7, #6]
 80003d6:	79ba      	ldrb	r2, [r7, #6]
 80003d8:	7979      	ldrb	r1, [r7, #5]
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	3b01      	subs	r3, #1
 80003e0:	429a      	cmp	r2, r3
 80003e2:	dbce      	blt.n	8000382 <ArefRTOS_voidBubbleSort+0x1e>
	for(uint8_t i = 0 ; i < LOC_u8Counter - 1 ; i++){
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	3301      	adds	r3, #1
 80003e8:	71fb      	strb	r3, [r7, #7]
 80003ea:	79fa      	ldrb	r2, [r7, #7]
 80003ec:	797b      	ldrb	r3, [r7, #5]
 80003ee:	3b01      	subs	r3, #1
 80003f0:	429a      	cmp	r2, r3
 80003f2:	dbc3      	blt.n	800037c <ArefRTOS_voidBubbleSort+0x18>
			}
		}
	}
}
 80003f4:	bf00      	nop
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	2000001c 	.word	0x2000001c

08000404 <ArefRTOS_voidFirstStageScheduler>:

static void ArefRTOS_voidFirstStageScheduler(){
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0

	// 01.Create some temporary local variables
	ArefRTOS_Task *LOC_currentTask = NULL , *LOC_nextTask = NULL,*LOC_tempTask = NULL ;
 800040a:	2300      	movs	r3, #0
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	2300      	movs	r3, #0
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	2300      	movs	r3, #0
 8000414:	603b      	str	r3, [r7, #0]
	uint8_t LOC_u8Counter = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	73fb      	strb	r3, [r7, #15]


	// 02.Sort Tasks in the tasks table
	ArefRTOS_voidBubbleSort();
 800041a:	f7ff ffa3 	bl	8000364 <ArefRTOS_voidBubbleSort>

	// 03.Select Current and Next Task
		//03.1.Free Ready Queue
		while(queue_get(&LOC_tempTask, &Global_QueueOfReadyTasks) != QUEUE_EMPTY);
 800041e:	bf00      	nop
 8000420:	463b      	mov	r3, r7
 8000422:	4928      	ldr	r1, [pc, #160]	; (80004c4 <ArefRTOS_voidFirstStageScheduler+0xc0>)
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff feeb 	bl	8000200 <queue_get>
 800042a:	4603      	mov	r3, r0
 800042c:	2b02      	cmp	r3, #2
 800042e:	d1f7      	bne.n	8000420 <ArefRTOS_voidFirstStageScheduler+0x1c>

		// 03.2.Update Ready Queue
		for(LOC_u8Counter = 0 ; LOC_u8Counter < OS_Control.CurrentNumberofTasks; LOC_u8Counter++)
 8000430:	2300      	movs	r3, #0
 8000432:	73fb      	strb	r3, [r7, #15]
 8000434:	e03a      	b.n	80004ac <ArefRTOS_voidFirstStageScheduler+0xa8>
		{
			LOC_currentTask = OS_Control.OS_SchedulerTable[LOC_u8Counter];
 8000436:	7bfb      	ldrb	r3, [r7, #15]
 8000438:	4a23      	ldr	r2, [pc, #140]	; (80004c8 <ArefRTOS_voidFirstStageScheduler+0xc4>)
 800043a:	3304      	adds	r3, #4
 800043c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000440:	60bb      	str	r3, [r7, #8]
			LOC_nextTask = OS_Control.OS_SchedulerTable[LOC_u8Counter+1];
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	3301      	adds	r3, #1
 8000446:	4a20      	ldr	r2, [pc, #128]	; (80004c8 <ArefRTOS_voidFirstStageScheduler+0xc4>)
 8000448:	3304      	adds	r3, #4
 800044a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800044e:	607b      	str	r3, [r7, #4]
			/*
			  -The OS tasks table is already sorted from the previous step
			  -Waiting Tasks will be added to the ready queue only if their state is not suspended
			   and their priorities are the highest priority among those tasks in the OS tasks table
			*/
			if(LOC_currentTask->TaskPrivateStates.TaskState != TS_Suspend)
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	7c1b      	ldrb	r3, [r3, #16]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d026      	beq.n	80004a6 <ArefRTOS_voidFirstStageScheduler+0xa2>

				/*
				 	 03.2.1.1.Case we reached the end of the OS tasks table or
				 	 Then Enqueue the current task, change its state to ready and terminate
				 */
				if(LOC_nextTask->TaskPriority == TS_Suspend){
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	7a1b      	ldrb	r3, [r3, #8]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d107      	bne.n	8000470 <ArefRTOS_voidFirstStageScheduler+0x6c>
					queue_add(LOC_currentTask, &Global_QueueOfReadyTasks);
 8000460:	4918      	ldr	r1, [pc, #96]	; (80004c4 <ArefRTOS_voidFirstStageScheduler+0xc0>)
 8000462:	68b8      	ldr	r0, [r7, #8]
 8000464:	f7ff fe98 	bl	8000198 <queue_add>
					LOC_currentTask->TaskPrivateStates.TaskState = TS_Ready;
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	2203      	movs	r2, #3
 800046c:	741a      	strb	r2, [r3, #16]
					break ;
 800046e:	e025      	b.n	80004bc <ArefRTOS_voidFirstStageScheduler+0xb8>
				}
				/*
				 	 03.2.1.2.Case current task priority number is less than next task priority number (current task has higher priority)
				 	 Then Enqueue the current task, change its state to ready and terminate
				 */
				else if(LOC_currentTask->TaskPriority < LOC_nextTask->TaskPriority){
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	7a1a      	ldrb	r2, [r3, #8]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7a1b      	ldrb	r3, [r3, #8]
 8000478:	429a      	cmp	r2, r3
 800047a:	d207      	bcs.n	800048c <ArefRTOS_voidFirstStageScheduler+0x88>
					queue_add(LOC_currentTask, &Global_QueueOfReadyTasks);
 800047c:	4911      	ldr	r1, [pc, #68]	; (80004c4 <ArefRTOS_voidFirstStageScheduler+0xc0>)
 800047e:	68b8      	ldr	r0, [r7, #8]
 8000480:	f7ff fe8a 	bl	8000198 <queue_add>
					LOC_currentTask->TaskPrivateStates.TaskState = TS_Ready;
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	2203      	movs	r2, #3
 8000488:	741a      	strb	r2, [r3, #16]
					break ;
 800048a:	e017      	b.n	80004bc <ArefRTOS_voidFirstStageScheduler+0xb8>
				 	 03.2.1.3.Case current task priority number equals next task priority number (current task has higher priority)
				 	 Then Round-Robin takes place, Enqueue current task to the ready queue
				 	 and by default the next task will be the current task for the next iteration so it will be handled automatically
				 	 So just don't break and keep it looping to enqueue tasks that should run in Round-Robin with time slices
				 */
				else if(LOC_currentTask->TaskPriority == LOC_nextTask->TaskPriority)
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	7a1a      	ldrb	r2, [r3, #8]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	7a1b      	ldrb	r3, [r3, #8]
 8000494:	429a      	cmp	r2, r3
 8000496:	d110      	bne.n	80004ba <ArefRTOS_voidFirstStageScheduler+0xb6>
				{
					queue_add(LOC_currentTask, &Global_QueueOfReadyTasks);
 8000498:	490a      	ldr	r1, [pc, #40]	; (80004c4 <ArefRTOS_voidFirstStageScheduler+0xc0>)
 800049a:	68b8      	ldr	r0, [r7, #8]
 800049c:	f7ff fe7c 	bl	8000198 <queue_add>
					LOC_currentTask->TaskPrivateStates.TaskState= TS_Ready ;
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	2203      	movs	r2, #3
 80004a4:	741a      	strb	r2, [r3, #16]
		for(LOC_u8Counter = 0 ; LOC_u8Counter < OS_Control.CurrentNumberofTasks; LOC_u8Counter++)
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
 80004a8:	3301      	adds	r3, #1
 80004aa:	73fb      	strb	r3, [r7, #15]
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <ArefRTOS_voidFirstStageScheduler+0xc4>)
 80004ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80004b2:	7bfa      	ldrb	r2, [r7, #15]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d3be      	bcc.n	8000436 <ArefRTOS_voidFirstStageScheduler+0x32>
				{
					break ;
				}
			}
		}
}
 80004b8:	e000      	b.n	80004bc <ArefRTOS_voidFirstStageScheduler+0xb8>
					break ;
 80004ba:	bf00      	nop
}
 80004bc:	bf00      	nop
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000060 	.word	0x20000060
 80004c8:	2000001c 	.word	0x2000001c

080004cc <ArefRTOS_voidSecondStageDispatcher>:

static void ArefRTOS_voidSecondStageDispatcher(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

	// 01.Create some temporary local variables
	uint8_t LOC_u8QueueSize = queue_size(&Global_QueueOfReadyTasks);
 80004d2:	4829      	ldr	r0, [pc, #164]	; (8000578 <ArefRTOS_voidSecondStageDispatcher+0xac>)
 80004d4:	f7ff feca 	bl	800026c <queue_size>
 80004d8:	4603      	mov	r3, r0
 80004da:	71fb      	strb	r3, [r7, #7]
	ArefRTOS_Task *LOC_currentTask = NULL ;
 80004dc:	2300      	movs	r3, #0
 80004de:	603b      	str	r3, [r7, #0]
	// 03.Select Current and Next Task to be running
		/*
	 	 03.1.Case that the ready queue is empty and there is no ready tasks and the current task is suspended
	 	  	  Then activate the idle task
		 */
	if((0 == LOC_u8QueueSize)&&(OS_Control.OS_CurrentTask->TaskPrivateStates.TaskState == TS_Suspend)){
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d108      	bne.n	80004f8 <ArefRTOS_voidSecondStageDispatcher+0x2c>
 80004e6:	4b25      	ldr	r3, [pc, #148]	; (800057c <ArefRTOS_voidSecondStageDispatcher+0xb0>)
 80004e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004ea:	7c1b      	ldrb	r3, [r3, #16]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d103      	bne.n	80004f8 <ArefRTOS_voidSecondStageDispatcher+0x2c>
		OS_Control.OS_NextTask = &Global_IdleTask;
 80004f0:	4b22      	ldr	r3, [pc, #136]	; (800057c <ArefRTOS_voidSecondStageDispatcher+0xb0>)
 80004f2:	4a23      	ldr	r2, [pc, #140]	; (8000580 <ArefRTOS_voidSecondStageDispatcher+0xb4>)
 80004f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80004f6:	e03a      	b.n	800056e <ArefRTOS_voidSecondStageDispatcher+0xa2>
	}
		/*
		 03.2.Case that the ready queue is empty and there is no ready tasks and the current task is not suspended
		 	  Then let the last task that was running, continue running
		 */
	else if((0 == LOC_u8QueueSize)&&(OS_Control.OS_CurrentTask->TaskPrivateStates.TaskState != TS_Suspend))
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d113      	bne.n	8000526 <ArefRTOS_voidSecondStageDispatcher+0x5a>
 80004fe:	4b1f      	ldr	r3, [pc, #124]	; (800057c <ArefRTOS_voidSecondStageDispatcher+0xb0>)
 8000500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000502:	7c1b      	ldrb	r3, [r3, #16]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d00e      	beq.n	8000526 <ArefRTOS_voidSecondStageDispatcher+0x5a>
	{
		OS_Control.OS_CurrentTask->TaskPrivateStates.TaskState = TS_Running;
 8000508:	4b1c      	ldr	r3, [pc, #112]	; (800057c <ArefRTOS_voidSecondStageDispatcher+0xb0>)
 800050a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800050c:	2201      	movs	r2, #1
 800050e:	741a      	strb	r2, [r3, #16]
		queue_add(OS_Control.OS_CurrentTask,&Global_QueueOfReadyTasks);
 8000510:	4b1a      	ldr	r3, [pc, #104]	; (800057c <ArefRTOS_voidSecondStageDispatcher+0xb0>)
 8000512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000514:	4918      	ldr	r1, [pc, #96]	; (8000578 <ArefRTOS_voidSecondStageDispatcher+0xac>)
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff fe3e 	bl	8000198 <queue_add>
		OS_Control.OS_NextTask = OS_Control.OS_CurrentTask;
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <ArefRTOS_voidSecondStageDispatcher+0xb0>)
 800051e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000520:	4a16      	ldr	r2, [pc, #88]	; (800057c <ArefRTOS_voidSecondStageDispatcher+0xb0>)
 8000522:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000524:	e023      	b.n	800056e <ArefRTOS_voidSecondStageDispatcher+0xa2>
	 	  	  Then enqueue the first task in the FIFO, assign it to be the next task
	 	  	  check if the current task is of same priority then apply the round robin algorithm
		 */
	else
	{
		queue_get(&LOC_currentTask, &Global_QueueOfReadyTasks);
 8000526:	463b      	mov	r3, r7
 8000528:	4913      	ldr	r1, [pc, #76]	; (8000578 <ArefRTOS_voidSecondStageDispatcher+0xac>)
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff fe68 	bl	8000200 <queue_get>
		OS_Control.OS_NextTask = LOC_currentTask ;
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	4a12      	ldr	r2, [pc, #72]	; (800057c <ArefRTOS_voidSecondStageDispatcher+0xb0>)
 8000534:	63d3      	str	r3, [r2, #60]	; 0x3c
		OS_Control.OS_NextTask->TaskPrivateStates.TaskState = TS_Running;
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <ArefRTOS_voidSecondStageDispatcher+0xb0>)
 8000538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800053a:	2201      	movs	r2, #1
 800053c:	741a      	strb	r2, [r3, #16]
		if((OS_Control.OS_CurrentTask->TaskPriority == OS_Control.OS_NextTask->TaskPriority)
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <ArefRTOS_voidSecondStageDispatcher+0xb0>)
 8000540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000542:	7a1a      	ldrb	r2, [r3, #8]
 8000544:	4b0d      	ldr	r3, [pc, #52]	; (800057c <ArefRTOS_voidSecondStageDispatcher+0xb0>)
 8000546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000548:	7a1b      	ldrb	r3, [r3, #8]
 800054a:	429a      	cmp	r2, r3
 800054c:	d10f      	bne.n	800056e <ArefRTOS_voidSecondStageDispatcher+0xa2>
				&&(OS_Control.OS_CurrentTask->TaskPrivateStates.TaskState != TS_Suspend)){
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <ArefRTOS_voidSecondStageDispatcher+0xb0>)
 8000550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000552:	7c1b      	ldrb	r3, [r3, #16]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d00a      	beq.n	800056e <ArefRTOS_voidSecondStageDispatcher+0xa2>
			queue_add(OS_Control.OS_CurrentTask,&Global_QueueOfReadyTasks);
 8000558:	4b08      	ldr	r3, [pc, #32]	; (800057c <ArefRTOS_voidSecondStageDispatcher+0xb0>)
 800055a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800055c:	4906      	ldr	r1, [pc, #24]	; (8000578 <ArefRTOS_voidSecondStageDispatcher+0xac>)
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fe1a 	bl	8000198 <queue_add>
			OS_Control.OS_CurrentTask->TaskPrivateStates.TaskState = TS_Ready;
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <ArefRTOS_voidSecondStageDispatcher+0xb0>)
 8000566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000568:	2203      	movs	r2, #3
 800056a:	741a      	strb	r2, [r3, #16]
		}
	}
}
 800056c:	e7ff      	b.n	800056e <ArefRTOS_voidSecondStageDispatcher+0xa2>
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000060 	.word	0x20000060
 800057c:	2000001c 	.word	0x2000001c
 8000580:	20000094 	.word	0x20000094

08000584 <ArefRTOS_voidCreateTask>:
* 														   *
*			      USER FUNCTIONS DEFINITIONS               *
*														   *
************************************************************/
ArefRTOS_ErrorID ArefRTOS_voidCreateTask(ArefRTOS_Task* pTask)
{
 8000584:	b480      	push	{r7}
 8000586:	b087      	sub	sp, #28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	ArefRTOS_ErrorID	LOC_ArefRTOS_ErrorID =	NoError ;
 800058c:	2300      	movs	r3, #0
 800058e:	75fb      	strb	r3, [r7, #23]

	// 01.Set Start of Task Stack by HW Stack Locator in OS_Control
	pTask->TaskPrivateStates._S_PSP_Task	=	OS_Control.HW_Stack_Locator	;
 8000590:	4b37      	ldr	r3, [pc, #220]	; (8000670 <ArefRTOS_voidCreateTask+0xec>)
 8000592:	689a      	ldr	r2, [r3, #8]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	615a      	str	r2, [r3, #20]

	// 02.Set End of Stack End = Start - (Stack Size of Task + MIN_STACK_SIZE due to TCB)
	pTask->TaskPrivateStates._E_PSP_Task	=	pTask->TaskPrivateStates._S_PSP_Task - (pTask->TaskStackSize + MIN_STACK_SIZE);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	695a      	ldr	r2, [r3, #20]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	f1a3 0284 	sub.w	r2, r3, #132	; 0x84
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	619a      	str	r2, [r3, #24]

	// 03.Check for Stack Overflow
	CHECK_STACK_OVF(pTask->TaskPrivateStates._E_PSP_Task);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	4a31      	ldr	r2, [pc, #196]	; (8000674 <ArefRTOS_voidCreateTask+0xf0>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d201      	bcs.n	80005b8 <ArefRTOS_voidCreateTask+0x34>
 80005b4:	2301      	movs	r3, #1
 80005b6:	75fb      	strb	r3, [r7, #23]

	// 04.Align 4 Bytes as safety
	OS_Control.HW_Stack_Locator = pTask->TaskPrivateStates._E_PSP_Task - SAFETY_SPACE_BETWEEN_STACKS	;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	3b04      	subs	r3, #4
 80005be:	4a2c      	ldr	r2, [pc, #176]	; (8000670 <ArefRTOS_voidCreateTask+0xec>)
 80005c0:	6093      	str	r3, [r2, #8]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	613b      	str	r3, [r7, #16]
	uint8_t LOC_u8Counter = 0 ;
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
	pTask->TaskPrivateStates.pCurrentPSP 	= (uint32_t *)pTask->TaskPrivateStates._S_PSP_Task	;
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	461a      	mov	r2, r3
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	61da      	str	r2, [r3, #28]
	*(pTask->TaskPrivateStates.pCurrentPSP) =	RST_xPSR	;
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	69db      	ldr	r3, [r3, #28]
 80005d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005dc:	601a      	str	r2, [r3, #0]
	DECREASE_SP_POSITION(pTask,1) ;
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	1f1a      	subs	r2, r3, #4
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	61da      	str	r2, [r3, #28]
	*(pTask->TaskPrivateStates.pCurrentPSP) = (uint32_t)pTask->pTaskFcn ;
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	68da      	ldr	r2, [r3, #12]
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	601a      	str	r2, [r3, #0]
	DECREASE_SP_POSITION(pTask,1) ;
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	1f1a      	subs	r2, r3, #4
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	61da      	str	r2, [r3, #28]
	*(pTask->TaskPrivateStates.pCurrentPSP) = RST_LR	;
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	69db      	ldr	r3, [r3, #28]
 8000600:	f06f 0202 	mvn.w	r2, #2
 8000604:	601a      	str	r2, [r3, #0]
	for(LOC_u8Counter = 0 ; LOC_u8Counter < 13 ; LOC_u8Counter++ )
 8000606:	2300      	movs	r3, #0
 8000608:	73fb      	strb	r3, [r7, #15]
 800060a:	e00b      	b.n	8000624 <ArefRTOS_voidCreateTask+0xa0>
		DECREASE_SP_POSITION(pTask,1) ;
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	69db      	ldr	r3, [r3, #28]
 8000610:	1f1a      	subs	r2, r3, #4
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	61da      	str	r2, [r3, #28]
		*(pTask->TaskPrivateStates.pCurrentPSP) = INIT_VAL_FOR_REG ;
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
	for(LOC_u8Counter = 0 ; LOC_u8Counter < 13 ; LOC_u8Counter++ )
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b0c      	cmp	r3, #12
 8000628:	d9f0      	bls.n	800060c <ArefRTOS_voidCreateTask+0x88>
}
 800062a:	bf00      	nop

	// 05.Initialize Stack Area
	ArefRTOS_voidDesignTaskStack(pTask);

	// 06.Check Current Number of Tasks comparing between number of defined tasks
	if(OS_Control.CurrentNumberofTasks <= MAX_NUM_OF_TASKS)
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <ArefRTOS_voidCreateTask+0xec>)
 800062e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000632:	2b0a      	cmp	r3, #10
 8000634:	d813      	bhi.n	800065e <ArefRTOS_voidCreateTask+0xda>
	{
		// 6.1.Update Scheduler Table
		OS_Control.OS_SchedulerTable[OS_Control.CurrentNumberofTasks]= pTask ;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <ArefRTOS_voidCreateTask+0xec>)
 8000638:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800063c:	490c      	ldr	r1, [pc, #48]	; (8000670 <ArefRTOS_voidCreateTask+0xec>)
 800063e:	3304      	adds	r3, #4
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		OS_Control.CurrentNumberofTasks++ ;
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <ArefRTOS_voidCreateTask+0xec>)
 8000648:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800064c:	3301      	adds	r3, #1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <ArefRTOS_voidCreateTask+0xec>)
 8000652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		// 6.2.Update Task State
		pTask->TaskPrivateStates.TaskState = TS_Suspend ;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	741a      	strb	r2, [r3, #16]
 800065c:	e001      	b.n	8000662 <ArefRTOS_voidCreateTask+0xde>
	}
	else
	{
		// Exceed Max Number of Tasks Defined by user
		LOC_ArefRTOS_ErrorID =	ExceedMaxNumberOfTasks ;
 800065e:	2303      	movs	r3, #3
 8000660:	75fb      	strb	r3, [r7, #23]
	}

	return LOC_ArefRTOS_ErrorID;
 8000662:	7dfb      	ldrb	r3, [r7, #23]
}
 8000664:	4618      	mov	r0, r3
 8000666:	371c      	adds	r7, #28
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	2000001c 	.word	0x2000001c
 8000674:	20000368 	.word	0x20000368

08000678 <ArefRTOS_voidInit>:

ArefRTOS_ErrorID ArefRTOS_voidInit(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
	ArefRTOS_ErrorID	LOC_ArefRTOS_ErrorID =	NoError ;
 800067e:	2300      	movs	r3, #0
 8000680:	71fb      	strb	r3, [r7, #7]

	// 01.HW initialize
	ArefRTOS_voidHardwareInit();
 8000682:	f7ff fe19 	bl	80002b8 <ArefRTOS_voidHardwareInit>

	// 02.OS Start With Suspend State
	OS_Control.OS_State	=	OS_Suspend ;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <ArefRTOS_voidInit+0x60>)
 8000688:	2200      	movs	r2, #0
 800068a:	731a      	strb	r2, [r3, #12]

	// 03.Specify Main Stack Area for OS
	LOC_ArefRTOS_ErrorID = ArefRTOS_staticMainStack();
 800068c:	f7ff fe36 	bl	80002fc <ArefRTOS_staticMainStack>
 8000690:	4603      	mov	r3, r0
 8000692:	71fb      	strb	r3, [r7, #7]

	// 04.Initialize Task Queue
	LOC_ArefRTOS_ErrorID = queue_create(&Global_QueueOfReadyTasks)	;
 8000694:	4811      	ldr	r0, [pc, #68]	; (80006dc <ArefRTOS_voidInit+0x64>)
 8000696:	f7ff fd6b 	bl	8000170 <queue_create>
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	if(LOC_ArefRTOS_ErrorID != (ArefRTOS_ErrorID)QUEUE_NO_ERROR)
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <ArefRTOS_voidInit+0x30>
		LOC_ArefRTOS_ErrorID = ErrorInQueueInit	;
 80006a4:	2302      	movs	r3, #2
 80006a6:	71fb      	strb	r3, [r7, #7]
	Global_IdleTask.TaskID 			= 0 ;
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <ArefRTOS_voidInit+0x68>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
	Global_IdleTask.TaskPriority	=	255	; // Take care that highest number is lowest priority
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <ArefRTOS_voidInit+0x68>)
 80006b0:	22ff      	movs	r2, #255	; 0xff
 80006b2:	721a      	strb	r2, [r3, #8]
	Global_IdleTask.TaskStackSize 	= 100;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <ArefRTOS_voidInit+0x68>)
 80006b6:	2264      	movs	r2, #100	; 0x64
 80006b8:	605a      	str	r2, [r3, #4]
	Global_IdleTask.pTaskFcn 		= ArefRTOS_voidIdleTask;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <ArefRTOS_voidInit+0x68>)
 80006bc:	4a09      	ldr	r2, [pc, #36]	; (80006e4 <ArefRTOS_voidInit+0x6c>)
 80006be:	60da      	str	r2, [r3, #12]
}
 80006c0:	bf00      	nop

	// 05.Initialize Idle Task
	ArefRTOS_voidIdleTaskInit();
	LOC_ArefRTOS_ErrorID = ArefRTOS_voidCreateTask(&Global_IdleTask);
 80006c2:	4807      	ldr	r0, [pc, #28]	; (80006e0 <ArefRTOS_voidInit+0x68>)
 80006c4:	f7ff ff5e 	bl	8000584 <ArefRTOS_voidCreateTask>
 80006c8:	4603      	mov	r3, r0
 80006ca:	71fb      	strb	r3, [r7, #7]

	return LOC_ArefRTOS_ErrorID ;
 80006cc:	79fb      	ldrb	r3, [r7, #7]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000001c 	.word	0x2000001c
 80006dc:	20000060 	.word	0x20000060
 80006e0:	20000094 	.word	0x20000094
 80006e4:	08000349 	.word	0x08000349

080006e8 <ArefRTOS_voidActivateTask>:

ArefRTOS_ErrorID ArefRTOS_voidActivateTask(ArefRTOS_Task* pTask)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	ArefRTOS_ErrorID	LOC_ArefRTOS_ErrorID =	NULL_ARGs ;
 80006f0:	2304      	movs	r3, #4
 80006f2:	73fb      	strb	r3, [r7, #15]
	if(pTask != NULL)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d008      	beq.n	800070c <ArefRTOS_voidActivateTask+0x24>
	{
		LOC_ArefRTOS_ErrorID =	NoError  ;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
		// 01.Add It in Waiting State
		pTask->TaskPrivateStates.TaskState = TS_Waiting;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2202      	movs	r2, #2
 8000702:	741a      	strb	r2, [r3, #16]
		// 02.Call Service Called SVC_CALL_ACTIVATE_TASK
		ArefRTOS_voidCallService((uint8_t)ArefRTOS_SVC_CALL_ACTIVATE_TASK);
 8000704:	2000      	movs	r0, #0
 8000706:	f7ff fdbd 	bl	8000284 <ArefRTOS_voidCallService>
 800070a:	e001      	b.n	8000710 <ArefRTOS_voidActivateTask+0x28>
	}
	else
	{
		LOC_ArefRTOS_ErrorID =	NULL_ARGs ;
 800070c:	2304      	movs	r3, #4
 800070e:	73fb      	strb	r3, [r7, #15]
	}

	return LOC_ArefRTOS_ErrorID ;
 8000710:	7bfb      	ldrb	r3, [r7, #15]
}
 8000712:	4618      	mov	r0, r3
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <ArefRTOS_voidTaskDelay>:

	return LOC_ArefRTOS_ErrorID ;
}

ArefRTOS_ErrorID ArefRTOS_voidTaskDelay(ArefRTOS_Task* pTask, uint32_t copy_u32NumberofTicks)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b084      	sub	sp, #16
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
 8000722:	6039      	str	r1, [r7, #0]
	ArefRTOS_ErrorID	LOC_ArefRTOS_ErrorID =	NoError ;
 8000724:	2300      	movs	r3, #0
 8000726:	73fb      	strb	r3, [r7, #15]
	// 01.Change Task state to be Suspend
	pTask->TaskPrivateStates.TaskState = TS_Suspend;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2200      	movs	r2, #0
 800072c:	741a      	strb	r2, [r3, #16]
	// 02.Enable Function Delay
	pTask->TaskPrivateStates.TimeDelayFlag = Enable ;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2201      	movs	r2, #1
 8000732:	f883 2020 	strb.w	r2, [r3, #32]
	// 03.Add number of ticks
	pTask->TaskPrivateStates.TaskDelayTime = copy_u32NumberofTicks;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	625a      	str	r2, [r3, #36]	; 0x24
	// 04.Call Service Called SVC_CALL_DELAY_TASK
	ArefRTOS_voidCallService((uint8_t)ArefRTOS_SVC_CALL_DELAY_TASK);
 800073c:	2002      	movs	r0, #2
 800073e:	f7ff fda1 	bl	8000284 <ArefRTOS_voidCallService>

	return LOC_ArefRTOS_ErrorID ;
 8000742:	7bfb      	ldrb	r3, [r7, #15]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <ArefRTOS_voidStartScheduler>:

ArefRTOS_ErrorID ArefRTOS_voidStartScheduler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
	ArefRTOS_ErrorID	LOC_ArefRTOS_ErrorID =	NoError ;
 8000752:	2300      	movs	r3, #0
 8000754:	71fb      	strb	r3, [r7, #7]

	// 01.Set OS Operating Mode
	OS_Control.OS_State = OS_Running ;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <ArefRTOS_voidStartScheduler+0x64>)
 8000758:	2201      	movs	r2, #1
 800075a:	731a      	strb	r2, [r3, #12]
	// 02.Idle task as an Initial Task
	OS_Control.OS_CurrentTask = &Global_IdleTask ;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <ArefRTOS_voidStartScheduler+0x64>)
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <ArefRTOS_voidStartScheduler+0x68>)
 8000760:	639a      	str	r2, [r3, #56]	; 0x38
	// 03.Set the system PSP to the current process(idle process) psp
	PSRC_voidSetPSP((uint32_t)Global_IdleTask.TaskPrivateStates.pCurrentPSP);
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <ArefRTOS_voidStartScheduler+0x68>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	603b      	str	r3, [r7, #0]
 * @note   Need Privileged  Access Level.
 * @param  copy_u32topOfPSP: the address of the top of process stack
 * @return void
 */
FORCE_INLINE void PSRC_voidSetPSP(uint32_t copy_u32topOfPSP){
	__asm("MOV r0,%[input0] \n\t"
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f380 8809 	msr	PSP, r0
		  "MSR PSP,r0"
		  :
		  :[input0]"r"(copy_u32topOfPSP));
}
 8000770:	bf00      	nop
	// 04.Activate the idle Task
	LOC_ArefRTOS_ErrorID =ArefRTOS_voidActivateTask(&Global_IdleTask);
 8000772:	4810      	ldr	r0, [pc, #64]	; (80007b4 <ArefRTOS_voidStartScheduler+0x68>)
 8000774:	f7ff ffb8 	bl	80006e8 <ArefRTOS_voidActivateTask>
 8000778:	4603      	mov	r3, r0
 800077a:	71fb      	strb	r3, [r7, #7]
	// 05.Start the System Ticker
	ArefRTOS_voidStartTicker();
 800077c:	f7ff fda2 	bl	80002c4 <ArefRTOS_voidStartTicker>
	__asm("MRS r0,CONTROL \n\t"
 8000780:	f3ef 8014 	mrs	r0, CONTROL
 8000784:	f04f 0102 	mov.w	r1, #2
 8000788:	ea40 0001 	orr.w	r0, r0, r1
 800078c:	f380 8814 	msr	CONTROL, r0
}
 8000790:	bf00      	nop
	// 06.Switch the system SP to point to the PSP
	PSRC_voidSetWorkingStack_PSP();
	// 07.Switch the Access Level to Unprivileged Mode
	PSRC_voidSetAccessLevel_UNPRIVILEGED();
 8000792:	f3ef 8314 	mrs	r3, CONTROL
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	f383 8814 	msr	CONTROL, r3
	// 08.Call Entry Point of Task
	OS_Control.OS_CurrentTask->pTaskFcn();
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <ArefRTOS_voidStartScheduler+0x64>)
 80007a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	4798      	blx	r3

	return LOC_ArefRTOS_ErrorID ;
 80007a6:	79fb      	ldrb	r3, [r7, #7]

}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000001c 	.word	0x2000001c
 80007b4:	20000094 	.word	0x20000094

080007b8 <ArefRTOS_SVC_CALL>:
* 																			  *
* 					HANDLER MODE FUNCTIONS DEFINITION						  *
* 																			  *
*******************************************************************************/
void ArefRTOS_SVC_CALL( uint32_t *svc_args )
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  * R2
  * R1
  * R0
  * First argument (R0) is svc_args[0]
  */
  uint8_t SVCParameter = *((uint8_t *)(((uint8_t*)svc_args[6])-2)) ;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3318      	adds	r3, #24
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	3b02      	subs	r3, #2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	73fb      	strb	r3, [r7, #15]

  switch(SVCParameter)
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d811      	bhi.n	80007f6 <ArefRTOS_SVC_CALL+0x3e>
  {
    case ArefRTOS_SVC_CALL_ACTIVATE_TASK:
    case ArefRTOS_SVC_CALL_TERMINATE_TASK:
    case ArefRTOS_SVC_CALL_DELAY_TASK:
    		// 01. Calling the Scheduler to decide which process to execute next, based on priority
    		ArefRTOS_voidFirstStageScheduler();
 80007d2:	f7ff fe17 	bl	8000404 <ArefRTOS_voidFirstStageScheduler>
    		// 02. Check if OS Working
    		if(OS_Control.OS_State == OS_Running)
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <ArefRTOS_SVC_CALL+0x4c>)
 80007d8:	7b1b      	ldrb	r3, [r3, #12]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d10d      	bne.n	80007fa <ArefRTOS_SVC_CALL+0x42>
    		{
    			if(OS_Control.OS_CurrentTask->TaskID != Global_IdleTask.TaskID )
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <ArefRTOS_SVC_CALL+0x4c>)
 80007e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007e2:	781a      	ldrb	r2, [r3, #0]
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <ArefRTOS_SVC_CALL+0x50>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d006      	beq.n	80007fa <ArefRTOS_SVC_CALL+0x42>
    			{
    				// 02.1.Calling Dispatcher to switch the CPU from one process to another, saving and restoring the state of each process.
    				ArefRTOS_voidSecondStageDispatcher();
 80007ec:	f7ff fe6e 	bl	80004cc <ArefRTOS_voidSecondStageDispatcher>
    				// 02.2.Context Switching
    				SCB_voidTrigPendSV();
 80007f0:	f000 f97a 	bl	8000ae8 <SCB_voidTrigPendSV>
    			}

    		}
    	break;
 80007f4:	e001      	b.n	80007fa <ArefRTOS_SVC_CALL+0x42>

    default:    /* unknown SVC */
      break;
 80007f6:	bf00      	nop
 80007f8:	e000      	b.n	80007fc <ArefRTOS_SVC_CALL+0x44>
    	break;
 80007fa:	bf00      	nop
  }
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2000001c 	.word	0x2000001c
 8000808:	20000094 	.word	0x20000094

0800080c <PendSV_Handler>:
* 					IRQ HANDLER FUNCTIONS DEFINITION						  *
* 																			  *
*******************************************************************************/
FORCE_NAKED void PendSV_Handler(void){
	/**************************************	Enter Critical Section	*************************************/
		  __asm volatile ("CPSID i");
 800080c:	b672      	cpsid	i
 * @param  void
 * @return U32 --> Current Process Stack Pointer address
 */
FORCE_INLINE uint32_t PSRC_voidGetPSP(void){
	uint32_t Loc_u32TopOfStack =  0 ;
	__asm("MRS r0,PSP \n\t"
 800080e:	f3ef 8009 	mrs	r0, PSP
 8000812:	4603      	mov	r3, r0
 8000814:	461c      	mov	r4, r3
		  "MOV %[output0],r0"
		  :[output0]"=r"(Loc_u32TopOfStack));
	return (Loc_u32TopOfStack);
 8000816:	4622      	mov	r2, r4
		/*
		 	01.Save Current Context of current task
			xPSR,PC,LR,R12,R3,R2,R1,R0 automatically Pushed
		 */
		OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP = (uint32_t*)PSRC_voidGetPSP();
 8000818:	4b6c      	ldr	r3, [pc, #432]	; (80009cc <PendSV_Handler+0x1c0>)
 800081a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800081c:	61da      	str	r2, [r3, #28]

		/*
		 	02.Save Rest of registers of current task
			R11,R10,R9,R8,R7,R6,R5,R4 manually Pushed
		 */
		DECREASE_SP_POSITION(OS_Control.OS_CurrentTask,1);	// Decrease Current SP by one
 800081e:	4b6b      	ldr	r3, [pc, #428]	; (80009cc <PendSV_Handler+0x1c0>)
 8000820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000822:	69da      	ldr	r2, [r3, #28]
 8000824:	4b69      	ldr	r3, [pc, #420]	; (80009cc <PendSV_Handler+0x1c0>)
 8000826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000828:	3a04      	subs	r2, #4
 800082a:	61da      	str	r2, [r3, #28]
		__asm volatile ("MOV %0,R4	" : "=r"(*(OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP)));
 800082c:	4b67      	ldr	r3, [pc, #412]	; (80009cc <PendSV_Handler+0x1c0>)
 800082e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4622      	mov	r2, r4
 8000834:	601a      	str	r2, [r3, #0]

		DECREASE_SP_POSITION(OS_Control.OS_CurrentTask,1);	// Decrease Current SP by one
 8000836:	4b65      	ldr	r3, [pc, #404]	; (80009cc <PendSV_Handler+0x1c0>)
 8000838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800083a:	69da      	ldr	r2, [r3, #28]
 800083c:	4b63      	ldr	r3, [pc, #396]	; (80009cc <PendSV_Handler+0x1c0>)
 800083e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000840:	3a04      	subs	r2, #4
 8000842:	61da      	str	r2, [r3, #28]
		__asm volatile ("MOV %0,R5	" : "=r"(*(OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP)));
 8000844:	4b61      	ldr	r3, [pc, #388]	; (80009cc <PendSV_Handler+0x1c0>)
 8000846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	462a      	mov	r2, r5
 800084c:	601a      	str	r2, [r3, #0]

		DECREASE_SP_POSITION(OS_Control.OS_CurrentTask,1);	// Decrease Current SP by one
 800084e:	4b5f      	ldr	r3, [pc, #380]	; (80009cc <PendSV_Handler+0x1c0>)
 8000850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000852:	69da      	ldr	r2, [r3, #28]
 8000854:	4b5d      	ldr	r3, [pc, #372]	; (80009cc <PendSV_Handler+0x1c0>)
 8000856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000858:	3a04      	subs	r2, #4
 800085a:	61da      	str	r2, [r3, #28]
		__asm volatile ("MOV %0,R6	" : "=r"(*(OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP)));
 800085c:	4b5b      	ldr	r3, [pc, #364]	; (80009cc <PendSV_Handler+0x1c0>)
 800085e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4632      	mov	r2, r6
 8000864:	601a      	str	r2, [r3, #0]

		DECREASE_SP_POSITION(OS_Control.OS_CurrentTask,1);	// Decrease Current SP by one
 8000866:	4b59      	ldr	r3, [pc, #356]	; (80009cc <PendSV_Handler+0x1c0>)
 8000868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800086a:	69da      	ldr	r2, [r3, #28]
 800086c:	4b57      	ldr	r3, [pc, #348]	; (80009cc <PendSV_Handler+0x1c0>)
 800086e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000870:	3a04      	subs	r2, #4
 8000872:	61da      	str	r2, [r3, #28]
		__asm volatile ("MOV %0,R7	" : "=r"(*(OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP)));
 8000874:	4b55      	ldr	r3, [pc, #340]	; (80009cc <PendSV_Handler+0x1c0>)
 8000876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	463a      	mov	r2, r7
 800087c:	601a      	str	r2, [r3, #0]

		DECREASE_SP_POSITION(OS_Control.OS_CurrentTask,1);	// Decrease Current SP by one
 800087e:	4b53      	ldr	r3, [pc, #332]	; (80009cc <PendSV_Handler+0x1c0>)
 8000880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000882:	69da      	ldr	r2, [r3, #28]
 8000884:	4b51      	ldr	r3, [pc, #324]	; (80009cc <PendSV_Handler+0x1c0>)
 8000886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000888:	3a04      	subs	r2, #4
 800088a:	61da      	str	r2, [r3, #28]
		__asm volatile ("MOV %0,R8	" : "=r"(*(OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP)));
 800088c:	4b4f      	ldr	r3, [pc, #316]	; (80009cc <PendSV_Handler+0x1c0>)
 800088e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4642      	mov	r2, r8
 8000894:	601a      	str	r2, [r3, #0]

		DECREASE_SP_POSITION(OS_Control.OS_CurrentTask,1);	// Decrease Current SP by one
 8000896:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <PendSV_Handler+0x1c0>)
 8000898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800089a:	69da      	ldr	r2, [r3, #28]
 800089c:	4b4b      	ldr	r3, [pc, #300]	; (80009cc <PendSV_Handler+0x1c0>)
 800089e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008a0:	3a04      	subs	r2, #4
 80008a2:	61da      	str	r2, [r3, #28]
		__asm volatile ("MOV %0,R9	" : "=r"(*(OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP)));
 80008a4:	4b49      	ldr	r3, [pc, #292]	; (80009cc <PendSV_Handler+0x1c0>)
 80008a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	464a      	mov	r2, r9
 80008ac:	601a      	str	r2, [r3, #0]

		DECREASE_SP_POSITION(OS_Control.OS_CurrentTask,1);	// Decrease Current SP by one
 80008ae:	4b47      	ldr	r3, [pc, #284]	; (80009cc <PendSV_Handler+0x1c0>)
 80008b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b2:	69da      	ldr	r2, [r3, #28]
 80008b4:	4b45      	ldr	r3, [pc, #276]	; (80009cc <PendSV_Handler+0x1c0>)
 80008b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b8:	3a04      	subs	r2, #4
 80008ba:	61da      	str	r2, [r3, #28]
		__asm volatile ("MOV %0,R10	" : "=r"(*(OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP)));
 80008bc:	4b43      	ldr	r3, [pc, #268]	; (80009cc <PendSV_Handler+0x1c0>)
 80008be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4652      	mov	r2, sl
 80008c4:	601a      	str	r2, [r3, #0]

		DECREASE_SP_POSITION(OS_Control.OS_CurrentTask,1);	// Decrease Current SP by one
 80008c6:	4b41      	ldr	r3, [pc, #260]	; (80009cc <PendSV_Handler+0x1c0>)
 80008c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ca:	69da      	ldr	r2, [r3, #28]
 80008cc:	4b3f      	ldr	r3, [pc, #252]	; (80009cc <PendSV_Handler+0x1c0>)
 80008ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008d0:	3a04      	subs	r2, #4
 80008d2:	61da      	str	r2, [r3, #28]
		__asm volatile ("MOV %0,R11	" : "=r"(*(OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP)));
 80008d4:	4b3d      	ldr	r3, [pc, #244]	; (80009cc <PendSV_Handler+0x1c0>)
 80008d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	465a      	mov	r2, fp
 80008dc:	601a      	str	r2, [r3, #0]


		/*
		 	03.Switch the control to the next task process stack
		 */
		if(OS_Control.OS_NextTask != NULL)
 80008de:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <PendSV_Handler+0x1c0>)
 80008e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d006      	beq.n	80008f4 <PendSV_Handler+0xe8>
		{
			OS_Control.OS_CurrentTask = OS_Control.OS_NextTask;
 80008e6:	4b39      	ldr	r3, [pc, #228]	; (80009cc <PendSV_Handler+0x1c0>)
 80008e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ea:	4a38      	ldr	r2, [pc, #224]	; (80009cc <PendSV_Handler+0x1c0>)
 80008ec:	6393      	str	r3, [r2, #56]	; 0x38
			OS_Control.OS_NextTask = NULL ;
 80008ee:	4b37      	ldr	r3, [pc, #220]	; (80009cc <PendSV_Handler+0x1c0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	63da      	str	r2, [r3, #60]	; 0x3c

		/*
		 	04.Restore the Rest of registers from the new task process stack
			R11,R10,R9,R8,R7,R6,R5,R4 manually Poped
		 */
		__asm volatile ("MOV R11,%0" : :"r"(*(OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP)));
 80008f4:	4b35      	ldr	r3, [pc, #212]	; (80009cc <PendSV_Handler+0x1c0>)
 80008f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	469b      	mov	fp, r3
		INCREASE_SP_POSITION(OS_Control.OS_CurrentTask,1);	// increase Current SP by one
 80008fe:	4b33      	ldr	r3, [pc, #204]	; (80009cc <PendSV_Handler+0x1c0>)
 8000900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000902:	69da      	ldr	r2, [r3, #28]
 8000904:	4b31      	ldr	r3, [pc, #196]	; (80009cc <PendSV_Handler+0x1c0>)
 8000906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000908:	3204      	adds	r2, #4
 800090a:	61da      	str	r2, [r3, #28]

		__asm volatile ("MOV R10,%0" : :"r"(*(OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP)));
 800090c:	4b2f      	ldr	r3, [pc, #188]	; (80009cc <PendSV_Handler+0x1c0>)
 800090e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	469a      	mov	sl, r3
		INCREASE_SP_POSITION(OS_Control.OS_CurrentTask,1);	// increase Current SP by one
 8000916:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <PendSV_Handler+0x1c0>)
 8000918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800091a:	69da      	ldr	r2, [r3, #28]
 800091c:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <PendSV_Handler+0x1c0>)
 800091e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000920:	3204      	adds	r2, #4
 8000922:	61da      	str	r2, [r3, #28]

		__asm volatile ("MOV R9,%0" : :"r"(*(OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP)));
 8000924:	4b29      	ldr	r3, [pc, #164]	; (80009cc <PendSV_Handler+0x1c0>)
 8000926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4699      	mov	r9, r3
		INCREASE_SP_POSITION(OS_Control.OS_CurrentTask,1);	// increase Current SP by one
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <PendSV_Handler+0x1c0>)
 8000930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000932:	69da      	ldr	r2, [r3, #28]
 8000934:	4b25      	ldr	r3, [pc, #148]	; (80009cc <PendSV_Handler+0x1c0>)
 8000936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000938:	3204      	adds	r2, #4
 800093a:	61da      	str	r2, [r3, #28]

		__asm volatile ("MOV R8,%0" : :"r"(*(OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP)));
 800093c:	4b23      	ldr	r3, [pc, #140]	; (80009cc <PendSV_Handler+0x1c0>)
 800093e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4698      	mov	r8, r3
		INCREASE_SP_POSITION(OS_Control.OS_CurrentTask,1);	// increase Current SP by one
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <PendSV_Handler+0x1c0>)
 8000948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800094a:	69da      	ldr	r2, [r3, #28]
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <PendSV_Handler+0x1c0>)
 800094e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000950:	3204      	adds	r2, #4
 8000952:	61da      	str	r2, [r3, #28]

		__asm volatile ("MOV R7,%0" : :"r"(*(OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP)));
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <PendSV_Handler+0x1c0>)
 8000956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	461f      	mov	r7, r3
		INCREASE_SP_POSITION(OS_Control.OS_CurrentTask,1);	// increase Current SP by one
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <PendSV_Handler+0x1c0>)
 8000960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000962:	69da      	ldr	r2, [r3, #28]
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <PendSV_Handler+0x1c0>)
 8000966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000968:	3204      	adds	r2, #4
 800096a:	61da      	str	r2, [r3, #28]

		__asm volatile ("MOV R6,%0" : :"r"(*(OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP)));
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <PendSV_Handler+0x1c0>)
 800096e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	461e      	mov	r6, r3
		INCREASE_SP_POSITION(OS_Control.OS_CurrentTask,1);	// increase Current SP by one
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <PendSV_Handler+0x1c0>)
 8000978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800097a:	69da      	ldr	r2, [r3, #28]
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <PendSV_Handler+0x1c0>)
 800097e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000980:	3204      	adds	r2, #4
 8000982:	61da      	str	r2, [r3, #28]

		__asm volatile ("MOV R5,%0" : :"r"(*(OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP)));
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <PendSV_Handler+0x1c0>)
 8000986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	461d      	mov	r5, r3
		INCREASE_SP_POSITION(OS_Control.OS_CurrentTask,1);	// increase Current SP by one
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <PendSV_Handler+0x1c0>)
 8000990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000992:	69da      	ldr	r2, [r3, #28]
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <PendSV_Handler+0x1c0>)
 8000996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000998:	3204      	adds	r2, #4
 800099a:	61da      	str	r2, [r3, #28]

		__asm volatile ("MOV R4,%0" : :"r"(*(OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP)));
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <PendSV_Handler+0x1c0>)
 800099e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	461c      	mov	r4, r3
		INCREASE_SP_POSITION(OS_Control.OS_CurrentTask,1);	// increase Current SP by one
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <PendSV_Handler+0x1c0>)
 80009a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009aa:	69da      	ldr	r2, [r3, #28]
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <PendSV_Handler+0x1c0>)
 80009ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b0:	3204      	adds	r2, #4
 80009b2:	61da      	str	r2, [r3, #28]

		/*
		 	05.Update CPU PSP <<-- new task PSP
		 */
		PSRC_voidSetPSP((uint32_t)OS_Control.OS_CurrentTask->TaskPrivateStates.pCurrentPSP);
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <PendSV_Handler+0x1c0>)
 80009b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	461c      	mov	r4, r3
	__asm("MOV r0,%[input0] \n\t"
 80009bc:	4620      	mov	r0, r4
 80009be:	f380 8809 	msr	PSP, r0
}
 80009c2:	bf00      	nop

		/*
		 	06.Enable IRQ and Exit the Critical Section

		 */
		__asm volatile ("CPSIE i");
 80009c4:	b662      	cpsie	i

		/*
		 	07.Switch the control to the next task and exit

		 */
		__asm("BX LR");
 80009c6:	4770      	bx	lr

}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	2000001c 	.word	0x2000001c

080009d0 <SysTick_Handler>:

void SysTick_Handler(void){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
	STKHandlerLED ^=1;
 80009d6:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <SysTick_Handler+0xa8>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	f083 0301 	eor.w	r3, r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <SysTick_Handler+0xa8>)
 80009e2:	701a      	strb	r2, [r3, #0]
	uint8_t LOC_u8Counter = 0 ;
 80009e4:	2300      	movs	r3, #0
 80009e6:	71fb      	strb	r3, [r7, #7]
	for(LOC_u8Counter = 0 ; LOC_u8Counter < OS_Control.CurrentNumberofTasks; LOC_u8Counter++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	71fb      	strb	r3, [r7, #7]
 80009ec:	e035      	b.n	8000a5a <SysTick_Handler+0x8a>
		if((OS_Control.OS_SchedulerTable[LOC_u8Counter]->TaskPrivateStates.TaskState == TS_Suspend) && (OS_Control.OS_SchedulerTable[LOC_u8Counter]->TaskPrivateStates.TimeDelayFlag == 1))
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4a22      	ldr	r2, [pc, #136]	; (8000a7c <SysTick_Handler+0xac>)
 80009f2:	3304      	adds	r3, #4
 80009f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f8:	7c1b      	ldrb	r3, [r3, #16]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d12a      	bne.n	8000a54 <SysTick_Handler+0x84>
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <SysTick_Handler+0xac>)
 8000a02:	3304      	adds	r3, #4
 8000a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d121      	bne.n	8000a54 <SysTick_Handler+0x84>
			OS_Control.OS_SchedulerTable[LOC_u8Counter]->TaskPrivateStates.TaskDelayTime-- ;
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	4a1a      	ldr	r2, [pc, #104]	; (8000a7c <SysTick_Handler+0xac>)
 8000a14:	3304      	adds	r3, #4
 8000a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a1c:	3a01      	subs	r2, #1
 8000a1e:	625a      	str	r2, [r3, #36]	; 0x24
			if(OS_Control.OS_SchedulerTable[LOC_u8Counter]->TaskPrivateStates.TaskDelayTime == 0)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	4a16      	ldr	r2, [pc, #88]	; (8000a7c <SysTick_Handler+0xac>)
 8000a24:	3304      	adds	r3, #4
 8000a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d111      	bne.n	8000a54 <SysTick_Handler+0x84>
				OS_Control.OS_SchedulerTable[LOC_u8Counter]->TaskPrivateStates.TimeDelayFlag = Disable ;
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <SysTick_Handler+0xac>)
 8000a34:	3304      	adds	r3, #4
 8000a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2020 	strb.w	r2, [r3, #32]
				OS_Control.OS_SchedulerTable[LOC_u8Counter]->TaskPrivateStates.TaskState = TS_Waiting ;
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <SysTick_Handler+0xac>)
 8000a44:	3304      	adds	r3, #4
 8000a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	741a      	strb	r2, [r3, #16]
				ArefRTOS_voidCallService(ArefRTOS_SVC_CALL_DELAY_TASK);
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f7ff fc18 	bl	8000284 <ArefRTOS_voidCallService>
	for(LOC_u8Counter = 0 ; LOC_u8Counter < OS_Control.CurrentNumberofTasks; LOC_u8Counter++)
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	3301      	adds	r3, #1
 8000a58:	71fb      	strb	r3, [r7, #7]
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <SysTick_Handler+0xac>)
 8000a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d3c3      	bcc.n	80009ee <SysTick_Handler+0x1e>
}
 8000a66:	bf00      	nop
	//01.Update the delayed tasks & Update the scheduler table if needed
	ArefRTOS_voidCheckDelayedTasks();
	//02.Select Task to execute
	ArefRTOS_voidSecondStageDispatcher();
 8000a68:	f7ff fd30 	bl	80004cc <ArefRTOS_voidSecondStageDispatcher>
	//03.Context Switching
	SCB_voidTrigPendSV();
 8000a6c:	f000 f83c 	bl	8000ae8 <SCB_voidTrigPendSV>
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200000bd 	.word	0x200000bd
 8000a7c:	2000001c 	.word	0x2000001c

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	; (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	0152      	lsls	r2, r2, #5
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0152      	lsls	r2, r2, #5
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_SetPendSVInterruptPriority>:
/***********************************************************
* 														   *
*			    FUNCTIONS DEFINITIONS	                   *
*														   *
************************************************************/
void NVIC_SetPendSVInterruptPriority(void){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	__NVIC_SetPriority(PendSV_IRQn, PendSV_InterruptPriorityNumber);
 8000ad8:	210f      	movs	r1, #15
 8000ada:	f06f 0001 	mvn.w	r0, #1
 8000ade:	f7ff ffcf 	bl	8000a80 <__NVIC_SetPriority>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <SCB_voidTrigPendSV>:
* 														   *
*			       FUNCTIONS DEFINITION                    *
*														   *
************************************************************/
void SCB_voidTrigPendSV(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
	SET_BIT(SCB_ICSR,SCB_ICSR_PendSV_BitMask);
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SCB_voidTrigPendSV+0x18>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <SCB_voidTrigPendSV+0x18>)
 8000af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	e000ed04 	.word	0xe000ed04

08000b04 <__NVIC_SetPriority>:
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	; (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	0152      	lsls	r2, r2, #5
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	; (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0152      	lsls	r2, r2, #5
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	2107      	movs	r1, #7
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f7ff ffc2 	bl	8000b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <STK_SetPeriodicInterruptInterval>:
/***********************************************************
* 														   *
*			    FUNCTIONS DEFINITIONS	                   *
*														   *
************************************************************/
void STK_SetPeriodicInterruptInterval(void){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	SysTick_Config(DelayTime_1mS_NumberOfCounts);
 8000ba0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000ba4:	f7ff ffd8 	bl	8000b58 <SysTick_Config>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <task1>:
ArefRTOS_ErrorID Error;
uint8_t Task1LED, Task2LED, Task3LED, Task4LED;
/*******************************************************************************
                          Tasks Definitions
*******************************************************************************/
void task1(void){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	for(;;){
		Task1LED ^=1;
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <task1+0x1c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	f083 0301 	eor.w	r3, r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <task1+0x1c>)
 8000bbc:	701a      	strb	r2, [r3, #0]
		ArefRTOS_voidTaskDelay(&Task1, 100);
 8000bbe:	2164      	movs	r1, #100	; 0x64
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <task1+0x20>)
 8000bc2:	f7ff fdaa 	bl	800071a <ArefRTOS_voidTaskDelay>
		Task1LED ^=1;
 8000bc6:	e7f3      	b.n	8000bb0 <task1+0x4>
 8000bc8:	20000160 	.word	0x20000160
 8000bcc:	200000c0 	.word	0x200000c0

08000bd0 <task2>:
	}
}
void task2(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	for(;;){
		Task2LED ^=1;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <task2+0x1c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	f083 0301 	eor.w	r3, r3, #1
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b03      	ldr	r3, [pc, #12]	; (8000bec <task2+0x1c>)
 8000be0:	701a      	strb	r2, [r3, #0]
		ArefRTOS_voidTaskDelay(&Task2, 200);
 8000be2:	21c8      	movs	r1, #200	; 0xc8
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <task2+0x20>)
 8000be6:	f7ff fd98 	bl	800071a <ArefRTOS_voidTaskDelay>
		Task2LED ^=1;
 8000bea:	e7f3      	b.n	8000bd4 <task2+0x4>
 8000bec:	20000161 	.word	0x20000161
 8000bf0:	200000e8 	.word	0x200000e8

08000bf4 <task3>:
	}
}

void task3(void){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	for(;;){
		Task3LED ^=1;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <task3+0x20>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	f083 0301 	eor.w	r3, r3, #1
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <task3+0x20>)
 8000c04:	701a      	strb	r2, [r3, #0]
		ArefRTOS_voidTaskDelay(&Task3, 400);
 8000c06:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000c0a:	4803      	ldr	r0, [pc, #12]	; (8000c18 <task3+0x24>)
 8000c0c:	f7ff fd85 	bl	800071a <ArefRTOS_voidTaskDelay>
		Task3LED ^=1;
 8000c10:	e7f2      	b.n	8000bf8 <task3+0x4>
 8000c12:	bf00      	nop
 8000c14:	20000162 	.word	0x20000162
 8000c18:	20000110 	.word	0x20000110

08000c1c <task4>:
	}
}

void task4(void){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	for(;;){
		Task4LED ^=1;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <task4+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	f083 0301 	eor.w	r3, r3, #1
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <task4+0x20>)
 8000c2c:	701a      	strb	r2, [r3, #0]
		ArefRTOS_voidTaskDelay(&Task4, 800);
 8000c2e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000c32:	4803      	ldr	r0, [pc, #12]	; (8000c40 <task4+0x24>)
 8000c34:	f7ff fd71 	bl	800071a <ArefRTOS_voidTaskDelay>
		Task4LED ^=1;
 8000c38:	e7f2      	b.n	8000c20 <task4+0x4>
 8000c3a:	bf00      	nop
 8000c3c:	20000163 	.word	0x20000163
 8000c40:	20000138 	.word	0x20000138

08000c44 <main>:
	}
}

int main(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	//01. Initialize the OS Software & hardware
	if(ArefRTOS_voidInit()!= NoError)
 8000c48:	f7ff fd16 	bl	8000678 <ArefRTOS_voidInit>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d000      	beq.n	8000c54 <main+0x10>
		while(1);
 8000c52:	e7fe      	b.n	8000c52 <main+0xe>
	//03. Configure the Tasks
	Task1.TaskID = 1;
 8000c54:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <main+0xb0>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
	Task1.TaskPriority = 1;
 8000c5a:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <main+0xb0>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	721a      	strb	r2, [r3, #8]
	Task1.TaskStackSize = 1024;
 8000c60:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <main+0xb0>)
 8000c62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c66:	605a      	str	r2, [r3, #4]
	Task1.pTaskFcn = task1;
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <main+0xb0>)
 8000c6a:	4a23      	ldr	r2, [pc, #140]	; (8000cf8 <main+0xb4>)
 8000c6c:	60da      	str	r2, [r3, #12]

	Task2.TaskID = 2;
 8000c6e:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <main+0xb8>)
 8000c70:	2202      	movs	r2, #2
 8000c72:	701a      	strb	r2, [r3, #0]
	Task2.TaskPriority = 1;
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <main+0xb8>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	721a      	strb	r2, [r3, #8]
	Task2.TaskStackSize = 1024;
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <main+0xb8>)
 8000c7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c80:	605a      	str	r2, [r3, #4]
	Task2.pTaskFcn = task2;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <main+0xb8>)
 8000c84:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <main+0xbc>)
 8000c86:	60da      	str	r2, [r3, #12]

	Task3.TaskID = 3;
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <main+0xc0>)
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	701a      	strb	r2, [r3, #0]
	Task3.TaskPriority = 1;
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <main+0xc0>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	721a      	strb	r2, [r3, #8]
	Task3.TaskStackSize = 1024;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <main+0xc0>)
 8000c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c9a:	605a      	str	r2, [r3, #4]
	Task3.pTaskFcn = task3;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <main+0xc0>)
 8000c9e:	4a1a      	ldr	r2, [pc, #104]	; (8000d08 <main+0xc4>)
 8000ca0:	60da      	str	r2, [r3, #12]

	Task4.TaskID = 4;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <main+0xc8>)
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	701a      	strb	r2, [r3, #0]
	Task4.TaskPriority = 1;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <main+0xc8>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	721a      	strb	r2, [r3, #8]
	Task4.TaskStackSize = 1024;
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <main+0xc8>)
 8000cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb4:	605a      	str	r2, [r3, #4]
	Task4.pTaskFcn = task4;
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <main+0xc8>)
 8000cb8:	4a15      	ldr	r2, [pc, #84]	; (8000d10 <main+0xcc>)
 8000cba:	60da      	str	r2, [r3, #12]

	//04. Create the Tasks
	ArefRTOS_voidCreateTask(&Task1);
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <main+0xb0>)
 8000cbe:	f7ff fc61 	bl	8000584 <ArefRTOS_voidCreateTask>
	ArefRTOS_voidCreateTask(&Task2);
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <main+0xb8>)
 8000cc4:	f7ff fc5e 	bl	8000584 <ArefRTOS_voidCreateTask>
	ArefRTOS_voidCreateTask(&Task3);
 8000cc8:	480e      	ldr	r0, [pc, #56]	; (8000d04 <main+0xc0>)
 8000cca:	f7ff fc5b 	bl	8000584 <ArefRTOS_voidCreateTask>
	ArefRTOS_voidCreateTask(&Task4);
 8000cce:	480f      	ldr	r0, [pc, #60]	; (8000d0c <main+0xc8>)
 8000cd0:	f7ff fc58 	bl	8000584 <ArefRTOS_voidCreateTask>

	//05. Activate the Tasks
	ArefRTOS_voidActivateTask(&Task1);
 8000cd4:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <main+0xb0>)
 8000cd6:	f7ff fd07 	bl	80006e8 <ArefRTOS_voidActivateTask>
	ArefRTOS_voidActivateTask(&Task2);
 8000cda:	4808      	ldr	r0, [pc, #32]	; (8000cfc <main+0xb8>)
 8000cdc:	f7ff fd04 	bl	80006e8 <ArefRTOS_voidActivateTask>
	ArefRTOS_voidActivateTask(&Task3);
 8000ce0:	4808      	ldr	r0, [pc, #32]	; (8000d04 <main+0xc0>)
 8000ce2:	f7ff fd01 	bl	80006e8 <ArefRTOS_voidActivateTask>
	ArefRTOS_voidActivateTask(&Task4);
 8000ce6:	4809      	ldr	r0, [pc, #36]	; (8000d0c <main+0xc8>)
 8000ce8:	f7ff fcfe 	bl	80006e8 <ArefRTOS_voidActivateTask>

	//06. Start the OS Scheduler
	ArefRTOS_voidStartScheduler();
 8000cec:	f7ff fd2e 	bl	800074c <ArefRTOS_voidStartScheduler>


    /* Loop forever */
	for(;;);
 8000cf0:	e7fe      	b.n	8000cf0 <main+0xac>
 8000cf2:	bf00      	nop
 8000cf4:	200000c0 	.word	0x200000c0
 8000cf8:	08000bad 	.word	0x08000bad
 8000cfc:	200000e8 	.word	0x200000e8
 8000d00:	08000bd1 	.word	0x08000bd1
 8000d04:	20000110 	.word	0x20000110
 8000d08:	08000bf5 	.word	0x08000bf5
 8000d0c:	20000138 	.word	0x20000138
 8000d10:	08000c1d 	.word	0x08000c1d

08000d14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d18:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1e:	490d      	ldr	r1, [pc, #52]	; (8000d54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <LoopForever+0xe>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d34:	4c0a      	ldr	r4, [pc, #40]	; (8000d60 <LoopForever+0x16>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d42:	f000 f811 	bl	8000d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d46:	f7ff ff7d 	bl	8000c44 <main>

08000d4a <LoopForever>:

LoopForever:
  b LoopForever
 8000d4a:	e7fe      	b.n	8000d4a <LoopForever>
  ldr   r0, =_estack
 8000d4c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d58:	08000dd0 	.word	0x08000dd0
  ldr r2, =_sbss
 8000d5c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d60:	20000164 	.word	0x20000164

08000d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC1_2_IRQHandler>
	...

08000d68 <__libc_init_array>:
 8000d68:	b570      	push	{r4, r5, r6, lr}
 8000d6a:	2600      	movs	r6, #0
 8000d6c:	4d0c      	ldr	r5, [pc, #48]	; (8000da0 <__libc_init_array+0x38>)
 8000d6e:	4c0d      	ldr	r4, [pc, #52]	; (8000da4 <__libc_init_array+0x3c>)
 8000d70:	1b64      	subs	r4, r4, r5
 8000d72:	10a4      	asrs	r4, r4, #2
 8000d74:	42a6      	cmp	r6, r4
 8000d76:	d109      	bne.n	8000d8c <__libc_init_array+0x24>
 8000d78:	f000 f81a 	bl	8000db0 <_init>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	4d0a      	ldr	r5, [pc, #40]	; (8000da8 <__libc_init_array+0x40>)
 8000d80:	4c0a      	ldr	r4, [pc, #40]	; (8000dac <__libc_init_array+0x44>)
 8000d82:	1b64      	subs	r4, r4, r5
 8000d84:	10a4      	asrs	r4, r4, #2
 8000d86:	42a6      	cmp	r6, r4
 8000d88:	d105      	bne.n	8000d96 <__libc_init_array+0x2e>
 8000d8a:	bd70      	pop	{r4, r5, r6, pc}
 8000d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d90:	4798      	blx	r3
 8000d92:	3601      	adds	r6, #1
 8000d94:	e7ee      	b.n	8000d74 <__libc_init_array+0xc>
 8000d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d9a:	4798      	blx	r3
 8000d9c:	3601      	adds	r6, #1
 8000d9e:	e7f2      	b.n	8000d86 <__libc_init_array+0x1e>
 8000da0:	08000dc8 	.word	0x08000dc8
 8000da4:	08000dc8 	.word	0x08000dc8
 8000da8:	08000dc8 	.word	0x08000dc8
 8000dac:	08000dcc 	.word	0x08000dcc

08000db0 <_init>:
 8000db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db2:	bf00      	nop
 8000db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000db6:	bc08      	pop	{r3}
 8000db8:	469e      	mov	lr, r3
 8000dba:	4770      	bx	lr

08000dbc <_fini>:
 8000dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dbe:	bf00      	nop
 8000dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dc2:	bc08      	pop	{r3}
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	4770      	bx	lr
